#pragma once

//#include "com_module.cpp"

#define COM_RANDOM_NUMBER_TABLE_SIZE 512

static f32 com_random[COM_RANDOM_NUMBER_TABLE_SIZE] = {
	0.001251f,
	0.563585f,
	0.193304f,
	0.808740f,
	0.585009f,
	0.479873f,
	0.350291f,
	0.895962f,
	0.822840f,
	0.746605f,
	0.174108f,
	0.858943f,
	0.710501f,
	0.513535f,
	0.303995f,
	0.014985f,
	0.091403f,
	0.364452f,
	0.147313f,
	0.165899f,
	0.988525f,
	0.445692f,
	0.119083f,
	0.004669f,
	0.008911f,
	0.377880f,
	0.531663f,
	0.571184f,
	0.601764f,
	0.607166f,
	0.166234f,
	0.663045f,
	0.450789f,
	0.352123f,
	0.057039f,
	0.607685f,
	0.783319f,
	0.802606f,
	0.519883f,
	0.301950f,
	0.875973f,
	0.726676f,
	0.955901f,
	0.925718f,
	0.539354f,
	0.142338f,
	0.462081f,
	0.235328f,
	0.862239f,
	0.209601f,
	0.779656f,
	0.843654f,
	0.996796f,
	0.999695f,
	0.611499f,
	0.392438f,
	0.266213f,
	0.297281f,
	0.840144f,
	0.023743f,
	0.375866f,
	0.092624f,
	0.677206f,
	0.056215f,
	0.008789f,
	0.918790f,
	0.275887f,
	0.272896f,
	0.587909f,
	0.691183f,
	0.837611f,
	0.726493f,
	0.484939f,
	0.205359f,
	0.743736f,
	0.468459f,
	0.457961f,
	0.949156f,
	0.744438f,
	0.108280f,
	0.599048f,
	0.385235f,
	0.735008f,
	0.608966f,
	0.572405f,
	0.361339f,
	0.151555f,
	0.225105f,
	0.425153f,
	0.802881f,
	0.517106f,
	0.989990f,
	0.751549f,
	0.345561f,
	0.168981f,
	0.657308f,
	0.491897f,
	0.063540f,
	0.699759f,
	0.504807f,
	0.147496f,
	0.949583f,
	0.141575f,
	0.905118f,
	0.692892f,
	0.303049f,
	0.426557f,
	0.070376f,
	0.966613f,
	0.683187f,
	0.153233f,
	0.877255f,
	0.821680f,
	0.582049f,
	0.191351f,
	0.177892f,
	0.817194f,
	0.475265f,
	0.155553f,
	0.503922f,
	0.732017f,
	0.405591f,
	0.279580f,
	0.568743f,
	0.682241f,
	0.755852f,
	0.721915f,
	0.475295f,
	0.123020f,
	0.367809f,
	0.834681f,
	0.035096f,
	0.517014f,
	0.662984f,
	0.426221f,
	0.104678f,
	0.949339f,
	0.921384f,
	0.549547f,
	0.345988f,
	0.471725f,
	0.374981f,
	0.846980f,
	0.316874f,
	0.456099f,
	0.271889f,
	0.982971f,
	0.297800f,
	0.739189f,
	0.567278f,
	0.195990f,
	0.761315f,
	0.839442f,
	0.397656f,
	0.500900f,
	0.890164f,
	0.027467f,
	0.994629f,
	0.572588f,
	0.050508f,
	0.531327f,
	0.194067f,
	0.843043f,
	0.626759f,
	0.657613f,
	0.197851f,
	0.842158f,
	0.123325f,
	0.109928f,
	0.743126f,
	0.314066f,
	0.941069f,
	0.286081f,
	0.336314f,
	0.140263f,
	0.733085f,
	0.834620f,
	0.707999f,
	0.600238f,
	0.747215f,
	0.252724f,
	0.144475f,
	0.001617f,
	0.061007f,
	0.806238f,
	0.852626f,
	0.210578f,
	0.115604f,
	0.553209f,
	0.014252f,
	0.113773f,
	0.454512f,
	0.752220f,
	0.686148f,
	0.543443f,
	0.073885f,
	0.436720f,
	0.201941f,
	0.696219f,
	0.290353f,
	0.436689f,
	0.232429f,
	0.577868f,
	0.532579f,
	0.628681f,
	0.160192f,
	0.504135f,
	0.963042f,
	0.695761f,
	0.924802f,
	0.189947f,
	0.335948f,
	0.178350f,
	0.995178f,
	0.457442f,
	0.998016f,
	0.097507f,
	0.625172f,
	0.094394f,
	0.437727f,
	0.931516f,
	0.048433f,
	0.894620f,
	0.290017f,
	0.227302f,
	0.769066f,
	0.410718f,
	0.201972f,
	0.628071f,
	0.604144f,
	0.451613f,
	0.466353f,
	0.597827f,
	0.634724f,
	0.854793f,
	0.828791f,
	0.624775f,
	0.720908f,
	0.565752f,
	0.375134f,
	0.184271f,
	0.737907f,
	0.555132f,
	0.905087f,
	0.242866f,
	0.188940f,
	0.604724f,
	0.698508f,
	0.584613f,
	0.351299f,
	0.494461f,
	0.080386f,
	0.740745f,
	0.612049f,
	0.620380f,
	0.691122f,
	0.804529f,
	0.149113f,
	0.576037f,
	0.867733f,
	0.911557f,
	0.614704f,
	0.727683f,
	0.043214f,
	0.667776f,
	0.976531f,
	0.315012f,
	0.569201f,
	0.305826f,
	0.173925f,
	0.108554f,
	0.869045f,
	0.851222f,
	0.744316f,
	0.154881f,
	0.326914f,
	0.079348f,
	0.076601f,
	0.640980f,
	0.820002f,
	0.545091f,
	0.448256f,
	0.408979f,
	0.298746f,
	0.465560f,
	0.501206f,
	0.152654f,
	0.323038f,
	0.737999f,
	0.313883f,
	0.826685f,
	0.959075f,
	0.873348f,
	0.725028f,
	0.300058f,
	0.943999f,
	0.127232f,
	0.065737f,
	0.784967f,
	0.524583f,
	0.609638f,
	0.956114f,
	0.072268f,
	0.875637f,
	0.653859f,
	0.322123f,
	0.104801f,
	0.505051f,
	0.227088f,
	0.290292f,
	0.919980f,
	0.551164f,
	0.662801f,
	0.114536f,
	0.492538f,
	0.379131f,
	0.496811f,
	0.793359f,
	0.509262f,
	0.382366f,
	0.688162f,
	0.532151f,
	0.606281f,
	0.395184f,
	0.005890f,
	0.707877f,
	0.100620f,
	0.623066f,
	0.863247f,
	0.491501f,
	0.747337f,
	0.496902f,
	0.380108f,
	0.785363f,
	0.552812f,
	0.357097f,
	0.955718f,
	0.630848f,
	0.176580f,
	0.374248f,
	0.131626f,
	0.743278f,
	0.951720f,
	0.611988f,
	0.027833f,
	0.329844f,
	0.055910f,
	0.639210f,
	0.131626f,
	0.847072f,
	0.864315f,
	0.596881f,
	0.721641f,
	0.853969f,
	0.014679f,
	0.126469f,
	0.707907f,
	0.617145f,
	0.217566f,
	0.065950f,
	0.168920f,
	0.624104f,
	0.340983f,
	0.319407f,
	0.367565f,
	0.661000f,
	0.802393f,
	0.806879f,
	0.526536f,
	0.611103f,
	0.798181f,
	0.900601f,
	0.144810f,
	0.630177f,
	0.402417f,
	0.253700f,
	0.136540f,
	0.855190f,
	0.066164f,
	0.427808f,
	0.573351f,
	0.302286f,
	0.548051f,
	0.225562f,
	0.311350f,
	0.110630f,
	0.808039f,
	0.134709f,
	0.284249f,
	0.788110f,
	0.895230f,
	0.789636f,
	0.743797f,
	0.615223f,
	0.361126f,
	0.856655f,
	0.228492f,
	0.863582f,
	0.229438f,
	0.249550f,
	0.542405f,
	0.984832f,
	0.053804f,
	0.081423f,
	0.524674f,
	0.426801f,
	0.094668f,
	0.258797f,
	0.891537f,
	0.232765f,
	0.146550f,
	0.125095f,
	0.931639f,
	0.080111f,
	0.047090f,
	0.058718f,
	0.336406f,
	0.914701f,
	0.398602f,
	0.432783f,
	0.946165f,
	0.837184f,
	0.534227f,
	0.842097f,
	0.693533f,
	0.397687f,
	0.259163f,
	0.004334f,
	0.525590f,
	0.954802f,
	0.398694f,
	0.241096f,
	0.585559f,
	0.255135f,
	0.684011f,
	0.945280f,
	0.435499f,
	0.890225f,
	0.007172f,
	0.940977f,
	0.601550f,
	0.786157f,
	0.576678f,
	0.142430f,
	0.222327f,
	0.383007f,
	0.004273f,
	0.417920f,
	0.082247f,
	0.659932f,
	0.855098f,
	0.064852f,
	0.811060f,
	0.662069f,
	0.691488f,
	0.802698f,
	0.530137f,
	0.685629f,
	0.142766f,
	0.689505f,
	0.727897f,
	0.777734f,
	0.031068f,
	0.868679f,
	0.644520f,
	0.706565f,
	0.085452f,
	0.551988f,
	0.947905f,
	0.058779f,
	0.274972f,
	0.145177f,
	0.981780f,
	0.619983f,
	0.292245f,
	0.922483f,
	0.367534f,
	0.694540f,
	0.218635f,
	0.155919f,
	0.240547f,
	0.521439f,
	0.902280f,
	0.106418f,
	0.902646f,
	0.441725f,
	0.080111f,
	0.782098f,
	0.171789f,
	0.974395f,
	0.775872f,
	0.870388f,
	0.210639f,
	0.456618f,
	0.003754f,
	0.750633f,
	0.114048f,
	0.404706f,
	0.311136f,
	0.992615f,
	0.038575f,
	0.252083f,
	0.189276f,
	0.247688f,
	0.153508f,
	0.620319f,
	0.885372f,
	0.939085f,
	0.195654f,
	0.779656f,
	0.645558f,
	0.656758f
};

inline f32 COM_Randf32(i32* index)
{
	if (*index < 0 || *index >= COM_RANDOM_NUMBER_TABLE_SIZE)
	{
		*index = 0;
	}
	//return com_random[*index++];
    f32 result = com_random[*index];
    *index += 1;
    // Why doesn't this work??
    // I want to com_random[*index++] but...
    // *index++;    // Does not increment pointed value
    //++*index;     // works
    return result;
}
